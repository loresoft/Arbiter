using System.Text;

namespace Arbiter.CommandQuery.Filters;

/// <summary>
/// Builds a <see langword="string"/>-based LINQ expression from an <see cref="EntityFilter"/> instance.
/// </summary>
/// <remarks>
/// This class converts an <see cref="EntityFilter"/> (including nested/grouped filters)
/// into a LINQ expression string and a corresponding list of parameter values.
/// </remarks>
/// <example>
/// The following example demonstrates how to use <see cref="LinqExpressionBuilder"/> to build a LINQ expression from an <see cref="EntityFilter"/>:
/// <code>
/// // Create a filter for entities where Status == "Active" and Priority > 1
/// var filter = new EntityFilter
/// {
///     Logic = "and",
///     Filters = new List&lt;EntityFilter&gt;
///     {
///         new EntityFilter { Name = "Status", Operator = "eq", Value = "Active" },
///         new EntityFilter { Name = "Priority", Operator = "gt", Value = 1 }
///     }
/// };
///
/// // Build the LINQ expression
/// var builder = new LinqExpressionBuilder();
/// builder.Build(filter);
///
/// // Access the generated expression and parameters
/// string expression = builder.Expression; // e.g., "(Status == @0 and Priority > @1)"
/// var parameters = builder.Parameters;    // [ "Active", 1 ]
/// </code>
/// </example>
public class LinqExpressionBuilder
{
    private static readonly Dictionary<FilterOperators, Action<StringBuilder, List<object?>, EntityFilter>> _filterWriters = [];

    /// <summary>
    /// Initializes static filter writers for supported query operators.
    /// </summary>
    static LinqExpressionBuilder()
    {
        _filterWriters.TryAdd(FilterOperators.Contains, WriteStringFilter);
        _filterWriters.TryAdd(FilterOperators.NotContains, WriteStringFilter);
        _filterWriters.TryAdd(FilterOperators.StartsWith, WriteStringFilter);
        _filterWriters.TryAdd(FilterOperators.NotStartsWith, WriteStringFilter);
        _filterWriters.TryAdd(FilterOperators.EndsWith, WriteStringFilter);
        _filterWriters.TryAdd(FilterOperators.NotEndsWith, WriteStringFilter);

        _filterWriters.TryAdd(FilterOperators.Equal, WriteStandardFilter);
        _filterWriters.TryAdd(FilterOperators.NotEqual, WriteStandardFilter);
        _filterWriters.TryAdd(FilterOperators.GreaterThan, WriteStandardFilter);
        _filterWriters.TryAdd(FilterOperators.GreaterThanOrEqual, WriteStandardFilter);
        _filterWriters.TryAdd(FilterOperators.LessThan, WriteStandardFilter);
        _filterWriters.TryAdd(FilterOperators.LessThanOrEqual, WriteStandardFilter);

        _filterWriters.TryAdd(FilterOperators.IsNull, WriteNullFilter);
        _filterWriters.TryAdd(FilterOperators.IsNotNull, WriteNullFilter);

        _filterWriters.TryAdd(FilterOperators.In, WriteInFilter);
        _filterWriters.TryAdd(FilterOperators.NotIn, WriteInFilter);

        _filterWriters.TryAdd(FilterOperators.Expression, WriteRawExpression);
    }

    /// <summary>
    /// Registers a custom filter writer for a specific query operator.
    /// </summary>
    /// <param name="operator">The query operator to register.</param>
    /// <param name="writer">The writer action to use for the operator.</param>
    public static void RegisterWriter(FilterOperators @operator, Action<StringBuilder, List<object?>, EntityFilter> writer)
    {
        _filterWriters[@operator] = writer;
    }


    private readonly StringBuilder _expression = new();
    private readonly List<object?> _values = [];

    /// <summary>
    /// Gets the list of parameters used in the built LINQ expression.  Generated by <see cref="Build(EntityFilter?)"/>.
    /// </summary>
    public IReadOnlyList<object?> Parameters => _values;

    /// <summary>
    /// Gets the LINQ expression string built from the query rule. Generated by <see cref="Build(EntityFilter?)"/>.
    /// </summary>
    public string Expression => _expression.ToString();

    /// <summary>
    /// Builds a LINQ expression string and parameter list from the specified <see cref="EntityFilter"/>.
    /// Expression will be updated with the generated LINQ expression.
    /// Parameters will also be updated with the values used in the expression.
    /// </summary>
    /// <param name="queryRule">The query rule to build the expression from.</param>
    public void Build(EntityFilter? queryRule)
    {
        _expression.Length = 0;
        _values.Clear();

        if (queryRule == null)
            return;

        Visit(queryRule);
    }

    /// <summary>
    /// Visits the specified <see cref="EntityFilter"/> and writes its expression.
    /// </summary>
    /// <param name="queryRule">The query rule to visit.</param>
    private void Visit(EntityFilter queryRule)
    {
        if (queryRule == null)
            return;

        if (queryRule.IsGroup())
            WriteGroup(queryRule);
        else if (queryRule is EntityFilter filter)
            WriteExpression(filter);
    }

    /// <summary>
    /// Writes a group expression for the specified <see cref="EntityFilter"/>.
    /// </summary>
    /// <param name="entityFilter">The query group to write.</param>
    private void WriteGroup(EntityFilter entityFilter)
    {
        var filters = entityFilter.Filters;

        if (filters == null || filters.Count == 0)
            return;

        var logic = entityFilter.Logic == FilterLogic.Or ? "||" : "&&";

        var wroteFirst = false;

        _expression.Append('(');
        foreach (var filter in filters)
        {
            if (wroteFirst)
                _expression.Append(' ').Append(logic).Append(' ');

            Visit(filter);
            wroteFirst = true;
        }
        _expression.Append(')');
    }

    /// <summary>
    /// Writes an expression for the specified <see cref="EntityFilter"/>.
    /// </summary>
    /// <param name="filter">The query filter to write.</param>
    private void WriteExpression(EntityFilter filter)
    {
        // Field required for expression
        if (string.IsNullOrWhiteSpace(filter.Name))
            return;

        // default comparison equal
        var comparison = filter.Operator ?? FilterOperators.Equal;

        if (_filterWriters.TryGetValue(comparison, out var action))
            action(_expression, _values, filter);
        else
            WriteStandardFilter(_expression, _values, filter);
    }


    /// <summary>
    /// Writes a string-based filter expression (e.g., Contains, StartsWith) for the specified <see cref="EntityFilter"/>.
    /// </summary>
    /// <param name="builder">The <see cref="StringBuilder"/> to append to.</param>
    /// <param name="parameters">The parameter list to add values to.</param>
    /// <param name="filter">The query filter to write.</param>
    private static void WriteStringFilter(StringBuilder builder, List<object?> parameters, EntityFilter filter)
    {
        // Field required for expression
        if (string.IsNullOrWhiteSpace(filter.Name))
            return;

        int index = parameters.Count;

        var field = filter.Name;
        var value = filter.Value;

        var method = filter.Operator switch
        {
            FilterOperators.StartsWith => "StartsWith",
            FilterOperators.NotStartsWith => "StartsWith",
            FilterOperators.EndsWith => "EndsWith",
            FilterOperators.NotEndsWith => "EndsWith",
            FilterOperators.Contains => "Contains",
            FilterOperators.NotContains => "Contains",
            _ => "Contains"
        };

        var negation = filter.Operator switch
        {
            FilterOperators.NotContains => true,
            FilterOperators.NotStartsWith => true,
            FilterOperators.NotEndsWith => true,
            _ => false
        };

        builder
            .Append(field)
            .Append(" != NULL && ");

        if (negation)
            builder.Append('!');

        builder
            .Append(field)
            .Append('.')
            .Append(method)
            .Append("(@")
            .Append(index)
            .Append(')');

        parameters.Add(value);
    }

    /// <summary>
    /// Writes a standard comparison filter expression (e.g., ==, !=, &gt;, &lt;) for the specified <see cref="EntityFilter"/>.
    /// </summary>
    /// <param name="builder">The <see cref="StringBuilder"/> to append to.</param>
    /// <param name="parameters">The parameter list to add values to.</param>
    /// <param name="filter">The query filter to write.</param>
    private static void WriteStandardFilter(StringBuilder builder, List<object?> parameters, EntityFilter filter)
    {
        // Field required for expression
        if (string.IsNullOrWhiteSpace(filter.Name))
            return;

        int index = parameters.Count;

        var field = filter.Name;
        var value = filter.Value;

        var comparison = filter.Operator switch
        {
            FilterOperators.Equal => "==",
            FilterOperators.NotEqual => "!=",
            FilterOperators.GreaterThan => ">",
            FilterOperators.GreaterThanOrEqual => ">=",
            FilterOperators.LessThan => "<",
            FilterOperators.LessThanOrEqual => "<=",
            _ => "=="
        };

        builder
            .Append(field)
            .Append(' ')
            .Append(comparison)
            .Append(" @")
            .Append(index);

        parameters.Add(value);
    }

    /// <summary>
    /// Writes a null-check filter expression (e.g., IsNull, IsNotNull) for the specified <see cref="EntityFilter"/>.
    /// </summary>
    /// <param name="builder">The <see cref="StringBuilder"/> to append to.</param>
    /// <param name="parameters">The parameter list to add values to.</param>
    /// <param name="filter">The query filter to write.</param>
    private static void WriteNullFilter(StringBuilder builder, List<object?> parameters, EntityFilter filter)
    {
        // Field required for expression
        if (string.IsNullOrWhiteSpace(filter.Name))
            return;

        int index = parameters.Count;

        var field = filter.Name;
        var value = filter.Value;

        var comparison = filter.Operator switch
        {
            FilterOperators.IsNull => "==",
            FilterOperators.IsNotNull => "!=",
            _ => "==",
        };

        builder
            .Append(field)
            .Append(' ')
            .Append(comparison)
            .Append(" NULL");
    }

    private static void WriteRawExpression(StringBuilder builder, List<object?> parameters, EntityFilter filter)
    {
        // Field required for expression
        if (string.IsNullOrWhiteSpace(filter.Name))
            return;

        int index = parameters.Count;

        var field = filter.Name;
        var value = filter.Value;

        // fix up parameter index if used multiple times
        var expression = index == 0 ? field : field.Replace("@0", $"@{index}", StringComparison.OrdinalIgnoreCase);

        builder.Append(expression);

        parameters.Add(value);
    }

    private static void WriteInFilter(StringBuilder builder, List<object?> parameters, EntityFilter filter)
    {
        // Field required for expression
        if (string.IsNullOrWhiteSpace(filter.Name))
            return;

        int index = parameters.Count;

        var field = filter.Name;
        var value = filter.Value;

        var negation = filter.Operator == FilterOperators.NotIn;
        if (negation)
            builder.Append('!');

        builder
            .Append("it.")
            .Append(field)
            .Append(" in @")
            .Append(index);

        parameters.Add(value);
    }
}
